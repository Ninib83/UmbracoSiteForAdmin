//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Zbu.ModelsBuilder v2.1.5.54
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Zbu.ModelsBuilder;
using Zbu.ModelsBuilder.Umbraco;

namespace UnderlakareCmsDialogue.Models
{
	/// <summary>Dialogue Category</summary>
	[PublishedContentModel("DialogueCategory")]
	public partial class DialogueCategory : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "DialogueCategory";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DialogueCategory(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DialogueCategory, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		///Category Image
		///</summary>
		[ImplementPropertyType("categoryImage")]
		public string CategoryImage
		{
			get { return this.GetPropertyValue<string>("categoryImage"); }
		}

		///<summary>
		///Category Permissions
		///</summary>
		[ImplementPropertyType("categoryPermissions")]
		public object CategoryPermissions
		{
			get { return this.GetPropertyValue("categoryPermissions"); }
		}

		///<summary>
		///Description
		///</summary>
		[ImplementPropertyType("description")]
		public IHtmlString Description
		{
			get { return this.GetPropertyValue<IHtmlString>("description"); }
		}

		///<summary>
		///Hide From Sitemap
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return this.GetPropertyValue<bool>("hideFromSitemap"); }
		}

		///<summary>
		///Lock Category
		///</summary>
		[ImplementPropertyType("lockCategory")]
		public bool LockCategory
		{
			get { return this.GetPropertyValue<bool>("lockCategory"); }
		}

		///<summary>
		///Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return this.GetPropertyValue<string>("metaDescription"); }
		}

		///<summary>
		///Moderate all posts in this Category
		///</summary>
		[ImplementPropertyType("moderateAllPostsInThisCategory")]
		public bool ModerateAllPostsInThisCategory
		{
			get { return this.GetPropertyValue<bool>("moderateAllPostsInThisCategory"); }
		}

		///<summary>
		///Moderate all topics in this Category
		///</summary>
		[ImplementPropertyType("moderateAllTopicsInThisCategory")]
		public bool ModerateAllTopicsInThisCategory
		{
			get { return this.GetPropertyValue<bool>("moderateAllTopicsInThisCategory"); }
		}

		///<summary>
		///Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return this.GetPropertyValue<string>("pageTitle"); }
		}

		///<summary>
		///Umbraco Internal Redirect ID
		///Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected pageâ€™s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return this.GetPropertyValue("umbracoInternalRedirectID"); }
		}

		///<summary>
		///Hide From Navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}

		///<summary>
		///Umbraco Redirect
		///Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return this.GetPropertyValue("umbracoRedirect"); }
		}

		///<summary>
		///Umbraco URL Alias
		///This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter leemessenger,test/this-is-a-test this would resolve the following urls to the same page.    /leemessenger.aspx  /test/this-is-a-test.aspx
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return this.GetPropertyValue<string>("umbracoUrlAlias"); }
		}

		///<summary>
		///Umbraco URL Name
		///This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return this.GetPropertyValue<string>("umbracoURLName"); }
		}
	}
}
