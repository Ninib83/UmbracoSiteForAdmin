//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Zbu.ModelsBuilder v2.1.5.54
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Zbu.ModelsBuilder;
using Zbu.ModelsBuilder.Umbraco;

namespace UnderlakareCmsDialogue.Models
{
	/// <summary>Dialogue</summary>
	[PublishedContentModel("Dialogue")]
	public partial class Dialogue : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Dialogue";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Dialogue(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Dialogue, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		///Activities Per Page
		///</summary>
		[ImplementPropertyType("activitiesPerPage")]
		public int ActivitiesPerPage
		{
			get { return this.GetPropertyValue<int>("activitiesPerPage"); }
		}

		///<summary>
		///Admin Email Address
		///This admin email address is where all notifications from the forum will be sent.
		///</summary>
		[ImplementPropertyType("adminEmailAddress")]
		public string AdminEmailAddress
		{
			get { return this.GetPropertyValue<string>("adminEmailAddress"); }
		}

		///<summary>
		///Allow Email Subscriptions
		///Allow members to subscribe to topics and categories and get emailed when a new post or topic is created. NOTE: You may need a dedicated SMTP service for busy forums.
		///</summary>
		[ImplementPropertyType("allowEmailSubscriptions")]
		public bool AllowEmailSubscriptions
		{
			get { return this.GetPropertyValue<bool>("allowEmailSubscriptions"); }
		}

		///<summary>
		///Allow Member Signatures
		///Allow members to have a signature under each post and topic.
		///</summary>
		[ImplementPropertyType("allowMemberSignatures")]
		public bool AllowMemberSignatures
		{
			get { return this.GetPropertyValue<bool>("allowMemberSignatures"); }
		}

		///<summary>
		///Allow Points
		///Allow points in the forum. Members get points for voting and posting etc...
		///</summary>
		[ImplementPropertyType("allowPoints")]
		public bool AllowPoints
		{
			get { return this.GetPropertyValue<bool>("allowPoints"); }
		}

		///<summary>
		///Allow Posts To Be Marked As Solution
		///Allow members to mark a post as the solution to a topic / question
		///</summary>
		[ImplementPropertyType("allowPostsToBeMarkedAsSolution")]
		public bool AllowPostsToBeMarkedAsSolution
		{
			get { return this.GetPropertyValue<bool>("allowPostsToBeMarkedAsSolution"); }
		}

		///<summary>
		///Allow Private Messages
		///Allow members to private message each other
		///</summary>
		[ImplementPropertyType("allowPrivateMessages")]
		public bool AllowPrivateMessages
		{
			get { return this.GetPropertyValue<bool>("allowPrivateMessages"); }
		}

		///<summary>
		///Allow Rss Feeds
		///Whether or not to show RSS feeds on the site
		///</summary>
		[ImplementPropertyType("allowRssFeeds")]
		public bool AllowRssFeeds
		{
			get { return this.GetPropertyValue<bool>("allowRssFeeds"); }
		}

		///<summary>
		///Amount Of Points Before A User Can Vote
		///The amount of points a member must have before they are allowed to vote on other members posts
		///</summary>
		[ImplementPropertyType("amountOfPointsBeforeAUserCanVote")]
		public int AmountOfPointsBeforeAuserCanVote
		{
			get { return this.GetPropertyValue<int>("amountOfPointsBeforeAUserCanVote"); }
		}

		///<summary>
		///Banned Email
		///A list of banned email addresses. You can use wildcards such as *@domain.com to block all attempted registrations using emails from that domain
		///</summary>
		[ImplementPropertyType("bannedEmail")]
		public IEnumerable<string> BannedEmail
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("bannedEmail"); }
		}

		///<summary>
		///Banned Links
		///This allows you to put in the Url/Link of a problem spammer (i.e. www.sitename.com) and when they try to post something with this domain their post or profile update will fail
		///</summary>
		[ImplementPropertyType("bannedLinks")]
		public IEnumerable<string> BannedLinks
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("bannedLinks"); }
		}

		///<summary>
		///Banned Words
		///These are banned words that get hashed out. Whenever they are found they are replaced with **** 
		///</summary>
		[ImplementPropertyType("bannedWords")]
		public IEnumerable<string> BannedWords
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("bannedWords"); }
		}

		///<summary>
		///Dialogue Url Name
		///This is used to create the url part of misc pages (Leaderboard etc...) which are not dedicated nodes
		///</summary>
		[ImplementPropertyType("dialogueUrlName")]
		public string DialogueUrlName
		{
			get { return this.GetPropertyValue<string>("dialogueUrlName"); }
		}

		///<summary>
		///Email Admin On New Member Signup
		///This will email the forum owner using the email address in the settings, every time a new member signs up
		///</summary>
		[ImplementPropertyType("emailAdminOnNewMemberSignup")]
		public bool EmailAdminOnNewMemberSignup
		{
			get { return this.GetPropertyValue<bool>("emailAdminOnNewMemberSignup"); }
		}

		///<summary>
		///Enable Akismet Spam Control
		///Enable Akismet Spam control. You will need to add the key. Use at your own risk
		///</summary>
		[ImplementPropertyType("enableAkismetSpamControl")]
		public bool EnableAkismetSpamControl
		{
			get { return this.GetPropertyValue<bool>("enableAkismetSpamControl"); }
		}

		///<summary>
		///Enable Member Reporting
		///Allow members to report other members. They are sent as emails to the forum admin email
		///</summary>
		[ImplementPropertyType("enableMemberReporting")]
		public bool EnableMemberReporting
		{
			get { return this.GetPropertyValue<bool>("enableMemberReporting"); }
		}

		///<summary>
		///Enable Spam Reporting
		///Allow members to report potential spam posts. They are sent as emails to the forum admin email
		///</summary>
		[ImplementPropertyType("enableSpamReporting")]
		public bool EnableSpamReporting
		{
			get { return this.GetPropertyValue<bool>("enableSpamReporting"); }
		}

		///<summary>
		///Enter a Spam registration prevention question
		///This question is shown on the registration page. They must answer it correctly to be able to register. Good to stop bots (i.e. What is 5 + 4)
		///</summary>
		[ImplementPropertyType("enterASpamRegistrationPreventionQuestion")]
		public string EnterAspamRegistrationPreventionQuestion
		{
			get { return this.GetPropertyValue<string>("enterASpamRegistrationPreventionQuestion"); }
		}

		///<summary>
		///Enter the answer to your Spam question
		///</summary>
		[ImplementPropertyType("enterTheAnswerToYourSpamQuestion")]
		public string EnterTheAnswerToYourSpamQuestion
		{
			get { return this.GetPropertyValue<string>("enterTheAnswerToYourSpamQuestion"); }
		}

		///<summary>
		///Enter Your Akismet Key Here
		///</summary>
		[ImplementPropertyType("enterYourAkismetKeyHere")]
		public string EnterYourAkismetKeyHere
		{
			get { return this.GetPropertyValue<string>("enterYourAkismetKeyHere"); }
		}

		///<summary>
		///Facebook App Id
		///You will need to add this and the secret to use Facebook login. See docs for more info
		///</summary>
		[ImplementPropertyType("facebookAppId")]
		public string FacebookAppId
		{
			get { return this.GetPropertyValue<string>("facebookAppId"); }
		}

		///<summary>
		///Facebook App Secret
		///</summary>
		[ImplementPropertyType("facebookAppSecret")]
		public string FacebookAppSecret
		{
			get { return this.GetPropertyValue<string>("facebookAppSecret"); }
		}

		///<summary>
		///File Upload Allowed Extensions
		///This needs to be a CSV string. i.e.   jpg,jpeg,png,gif
		///</summary>
		[ImplementPropertyType("fileUploadAllowedExtensions")]
		public string FileUploadAllowedExtensions
		{
			get { return this.GetPropertyValue<string>("fileUploadAllowedExtensions"); }
		}

		///<summary>
		///File Upload Maximum FileSize
		///File Upload Maximum FileSize In Bytes
		///</summary>
		[ImplementPropertyType("fileUploadMaximumFilesize")]
		public int FileUploadMaximumFilesize
		{
			get { return this.GetPropertyValue<int>("fileUploadMaximumFilesize"); }
		}

		///<summary>
		///Forum Description
		///General description about this forum and it's topic
		///</summary>
		[ImplementPropertyType("forumDescription")]
		public IHtmlString ForumDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("forumDescription"); }
		}

		///<summary>
		///Forum Name
		///The name of your forum, this is used for things like email messages
		///</summary>
		[ImplementPropertyType("forumName")]
		public string ForumName
		{
			get { return this.GetPropertyValue<string>("forumName"); }
		}

		///<summary>
		///Google Client Id
		///You will need to add this and the secret to use Google login. See docs for more info
		///</summary>
		[ImplementPropertyType("googleClientId")]
		public string GoogleClientId
		{
			get { return this.GetPropertyValue<string>("googleClientId"); }
		}

		///<summary>
		///Google Client Secret
		///</summary>
		[ImplementPropertyType("googleClientSecret")]
		public string GoogleClientSecret
		{
			get { return this.GetPropertyValue<string>("googleClientSecret"); }
		}

		///<summary>
		///Hide From Sitemap
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return this.GetPropertyValue<bool>("hideFromSitemap"); }
		}

		///<summary>
		///Manually Authorise New Members
		///New members can register, but can't use their accounts until a forum admin has authorised their account.
		///</summary>
		[ImplementPropertyType("manuallyAuthoriseNewMembers")]
		public bool ManuallyAuthoriseNewMembers
		{
			get { return this.GetPropertyValue<bool>("manuallyAuthoriseNewMembers"); }
		}

		///<summary>
		///Member Url Name
		///This is used to create the member profile url
		///</summary>
		[ImplementPropertyType("memberUrlName")]
		public string MemberUrlName
		{
			get { return this.GetPropertyValue<string>("memberUrlName"); }
		}

		///<summary>
		///Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return this.GetPropertyValue<string>("metaDescription"); }
		}

		///<summary>
		///New Members Must Confirm Accounts Via Email
		///New members can register, but cannot use their accounts until they have clicked a link in a email sent to them.
		///</summary>
		[ImplementPropertyType("newMembersMustConfirmAccountsViaEmail")]
		public bool NewMembersMustConfirmAccountsViaEmail
		{
			get { return this.GetPropertyValue<bool>("newMembersMustConfirmAccountsViaEmail"); }
		}

		///<summary>
		///New Member Starting Group
		///This is the starting group for all new members that register on this forum.
		///</summary>
		[ImplementPropertyType("newMemberStartingGroup")]
		public object NewMemberStartingGroup
		{
			get { return this.GetPropertyValue("newMemberStartingGroup"); }
		}

		///<summary>
		///Notification Reply Email Address
		///When messages are sent to members (Such as email confirmation) this address will show as the sender. i.e. noreply@domain.com
		///</summary>
		[ImplementPropertyType("notificationReplyEmailAddress")]
		public string NotificationReplyEmailAddress
		{
			get { return this.GetPropertyValue<string>("notificationReplyEmailAddress"); }
		}

		///<summary>
		///Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return this.GetPropertyValue<string>("pageTitle"); }
		}

		///<summary>
		///Points Added For A Solution
		///The amount of points given to the owner of the post which is gets marked as the Solution
		///</summary>
		[ImplementPropertyType("pointsAddedForASolution")]
		public int PointsAddedForAsolution
		{
			get { return this.GetPropertyValue<int>("pointsAddedForASolution"); }
		}

		///<summary>
		///Points Added For Positive Vote
		///The amount of points given to the owner of the post the voter has liked
		///</summary>
		[ImplementPropertyType("pointsAddedForPositiveVote")]
		public int PointsAddedForPositiveVote
		{
			get { return this.GetPropertyValue<int>("pointsAddedForPositiveVote"); }
		}

		///<summary>
		///Points Added Per New Post
		///The amount of points added to a member for creating a new post
		///</summary>
		[ImplementPropertyType("pointsAddedPerNewPost")]
		public int PointsAddedPerNewPost
		{
			get { return this.GetPropertyValue<int>("pointsAddedPerNewPost"); }
		}

		///<summary>
		///Points Deducted For Negative Vote
		///The amount of points deducted from the owner of the post the voter has disliked
		///</summary>
		[ImplementPropertyType("pointsDeductedForNegativeVote")]
		public int PointsDeductedForNegativeVote
		{
			get { return this.GetPropertyValue<int>("pointsDeductedForNegativeVote"); }
		}

		///<summary>
		///Posts Per Page
		///</summary>
		[ImplementPropertyType("postsPerPage")]
		public int PostsPerPage
		{
			get { return this.GetPropertyValue<int>("postsPerPage"); }
		}

		///<summary>
		///Private Message Flood Control
		///In minutes. The amount of time that must pass before a member can send another private message. Very good for stopping spammers.
		///</summary>
		[ImplementPropertyType("privateMessageFloodControl")]
		public int PrivateMessageFloodControl
		{
			get { return this.GetPropertyValue<int>("privateMessageFloodControl"); }
		}

		///<summary>
		///Private Message Inbox Size
		///The amount of messages a member is allowed, over this limit they are not allowed to send anymore until they have deleted some
		///</summary>
		[ImplementPropertyType("privateMessageInboxSize")]
		public int PrivateMessageInboxSize
		{
			get { return this.GetPropertyValue<int>("privateMessageInboxSize"); }
		}

		///<summary>
		///Suspend Registration
		///If you tick this then no new members will be able to register
		///</summary>
		[ImplementPropertyType("suspendRegistration")]
		public bool SuspendRegistration
		{
			get { return this.GetPropertyValue<bool>("suspendRegistration"); }
		}

		///<summary>
		///Theme
		///The theme of the forum. Very easy to change. Just copy the default folder, rename it and restart the website. And you can then select the new theme here
		///</summary>
		[ImplementPropertyType("theme")]
		public object Theme
		{
			get { return this.GetPropertyValue("theme"); }
		}

		///<summary>
		///Topics Per Page
		///</summary>
		[ImplementPropertyType("topicsPerPage")]
		public int TopicsPerPage
		{
			get { return this.GetPropertyValue<int>("topicsPerPage"); }
		}

		///<summary>
		///Topic Url Name
		///This is used to create the topic url
		///</summary>
		[ImplementPropertyType("topicUrlName")]
		public string TopicUrlName
		{
			get { return this.GetPropertyValue<string>("topicUrlName"); }
		}

		///<summary>
		///Umbraco Internal Redirect ID
		///Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return this.GetPropertyValue("umbracoInternalRedirectID"); }
		}

		///<summary>
		///Hide From Navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}

		///<summary>
		///Umbraco Redirect
		///Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return this.GetPropertyValue("umbracoRedirect"); }
		}

		///<summary>
		///Umbraco URL Alias
		///This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter leemessenger,test/this-is-a-test this would resolve the following urls to the same page.    /leemessenger.aspx  /test/this-is-a-test.aspx
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return this.GetPropertyValue<string>("umbracoUrlAlias"); }
		}

		///<summary>
		///Umbraco URL Name
		///This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return this.GetPropertyValue<string>("umbracoURLName"); }
		}
	}
}
